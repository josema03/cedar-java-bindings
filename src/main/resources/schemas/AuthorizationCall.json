{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "AuthorizationCall",
  "type": "object",
  "required": [
    "action",
    "context",
    "slice"
  ],
  "properties": {
    "action": {
      "$ref": "#/definitions/EntityUidJson"
    },
    "context": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/CedarValueJson"
      }
    },
    "principal": {
      "anyOf": [
        {
          "$ref": "#/definitions/EntityUidJson"
        },
        {
          "type": "null"
        }
      ]
    },
    "resource": {
      "anyOf": [
        {
          "$ref": "#/definitions/EntityUidJson"
        },
        {
          "type": "null"
        }
      ]
    },
    "schema": {
      "description": "Optional schema in JSON format. If present, this will inform the parsing: for instance, it will allow `__entity` and `__extn` escapes to be implicit, and it will error if attributes have the wrong types (e.g., string instead of integer).",
      "type": [
        "object",
        "null"
      ],
      "additionalProperties": {
        "$ref": "#/definitions/NamespaceDefinitionForJsonSchema"
      }
    },
    "slice": {
      "$ref": "#/definitions/RecvdSlice"
    }
  },
  "additionalProperties": false,
  "definitions": {
    "ActionEntityUID": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "default": null,
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "ActionType": {
      "description": "An action type describes a specific action entity.  It also describes what kinds of entities it can be used on.",
      "type": "object",
      "properties": {
        "appliesTo": {
          "default": null,
          "anyOf": [
            {
              "$ref": "#/definitions/ApplySpec"
            },
            {
              "type": "null"
            }
          ]
        },
        "attributes": {
          "description": "This maps attribute names to `cedar_policy_core::entities::json::value::CedarValueJson` which is the canonical representation of a cedar value as JSON.",
          "default": null,
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "$ref": "#/definitions/CedarValueJson"
          }
        },
        "memberOf": {
          "default": null,
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/ActionEntityUID"
          }
        }
      },
      "additionalProperties": false
    },
    "ApplySpec": {
      "description": "The apply spec specifies what principals and resources an action can be used with.  This specification can either be done through containing to entity types. The fields of this record are optional so that they can be omitted to declare that the apply spec for the principal or resource is undefined, meaning that the action can be applied to any principal or resource. This is different than providing an empty list because the empty list is interpreted as specifying that there are no principals or resources that an action applies to.",
      "type": "object",
      "properties": {
        "context": {
          "default": {
            "type": "Record",
            "attributes": {},
            "additionalAttributes": false
          },
          "allOf": [
            {
              "$ref": "#/definitions/SchemaType"
            }
          ]
        },
        "principalTypes": {
          "default": null,
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "resourceTypes": {
          "default": null,
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "CedarValueJson": {
      "description": "The canonical JSON representation of a Cedar value. Many Cedar values have a natural one-to-one mapping to and from JSON values. Cedar values of some types, like entity references or extension values, cannot easily be represented in JSON and thus are represented using the `__expr`, `__entity`, or `__extn` escapes.\n\nFor example, this is the JSON format for attribute values expected by `EntityJsonParser`, when schema-based parsing is not used.",
      "anyOf": [
        {
          "description": "Special JSON object with single reserved \"__expr\" key: interpret the following string as a (restricted) Cedar expression. Some escape (this or the following ones) is necessary for extension values and entity references, but this `__expr` escape could also be used for any other values.\n\n`__expr` is deprecated (starting with the 1.2 release) and will be removed in favor of `__entity` and `__extn`, which together cover all of the use-cases where `__expr` would have been necessary.",
          "type": "object",
          "required": [
            "__expr"
          ],
          "properties": {
            "__expr": {
              "description": "String to interpret as a (restricted) Cedar expression",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Special JSON object with single reserved \"__entity\" key: the following item should be a JSON object of the form `{ \"type\": \"xxx\", \"id\": \"yyy\" }`. Some escape (this or `__expr`, which is deprecated) is necessary for entity references.",
          "type": "object",
          "required": [
            "__entity"
          ],
          "properties": {
            "__entity": {
              "description": "JSON object containing the entity type and ID",
              "allOf": [
                {
                  "$ref": "#/definitions/TypeAndId"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Special JSON object with single reserved \"__extn\" key: the following item should be a JSON object of the form `{ \"fn\": \"xxx\", \"arg\": \"yyy\" }`. Some escape (this or `__expr`, which is deprecated) is necessary for extension values.",
          "type": "object",
          "required": [
            "__extn"
          ],
          "properties": {
            "__extn": {
              "description": "JSON object containing the extension-constructor call",
              "allOf": [
                {
                  "$ref": "#/definitions/FnAndArg"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        {
          "description": "JSON bool => Cedar bool",
          "type": "boolean"
        },
        {
          "description": "JSON int => Cedar long (64-bit signed integer)",
          "type": "integer",
          "format": "int64"
        },
        {
          "description": "JSON string => Cedar string",
          "type": "string"
        },
        {
          "description": "JSON list => Cedar set; can contain any JSONValues, even heterogeneously",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CedarValueJson"
          }
        },
        {
          "description": "JSON object => Cedar record; must have string keys, but values can be any `CedarValueJson`s, even heterogeneously",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/CedarValueJson"
          }
        }
      ]
    },
    "EntityType": {
      "description": "Entity types describe the relationships in the entity store, including what entities can be members of groups of what types, and what attributes can/should be included on entities of each type.",
      "type": "object",
      "properties": {
        "memberOfTypes": {
          "default": [],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "shape": {
          "default": {
            "type": "Record",
            "attributes": {},
            "additionalAttributes": false
          },
          "allOf": [
            {
              "$ref": "#/definitions/SchemaType"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "EntityUIDStrings": {
      "description": "Entity UID as strings.",
      "type": "object",
      "required": [
        "eid",
        "ty"
      ],
      "properties": {
        "eid": {
          "type": "string"
        },
        "ty": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "EntityUidJson": {
      "description": "Serde JSON format for Cedar values where we know we're expecting an entity reference",
      "anyOf": [
        {
          "description": "Explicit `__expr` escape; see notes on `CedarValueJson::ExprEscape`.\n\nDeprecated since the 1.2 release; use `{ \"__entity\": { \"type\": \"...\", \"id\": \"...\" } }` instead.",
          "type": "object",
          "required": [
            "__expr"
          ],
          "properties": {
            "__expr": {
              "description": "String to interpret as a (restricted) Cedar expression. In this case, it must evaluate to an entity reference.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Explicit `__entity` escape; see notes on `CedarValueJson::EntityEscape`",
          "type": "object",
          "required": [
            "__entity"
          ],
          "properties": {
            "__entity": {
              "description": "JSON object containing the entity type and ID",
              "allOf": [
                {
                  "$ref": "#/definitions/TypeAndId"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Implicit `__expr` escape, in which case we'll just see a JSON string.\n\nDeprecated since the 1.2 release; use `{ \"type\": \"...\", \"id\": \"...\" }` instead.",
          "type": "string"
        },
        {
          "description": "Implicit `__entity` escape, in which case we'll see just the TypeAndId structure",
          "allOf": [
            {
              "$ref": "#/definitions/TypeAndId"
            }
          ]
        }
      ]
    },
    "FnAndArg": {
      "description": "Structure expected by the `__extn` escape",
      "type": "object",
      "required": [
        "arg",
        "fn"
      ],
      "properties": {
        "arg": {
          "description": "Argument to that constructor",
          "allOf": [
            {
              "$ref": "#/definitions/CedarValueJson"
            }
          ]
        },
        "fn": {
          "description": "Extension constructor function",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Link": {
      "type": "object",
      "required": [
        "slot",
        "value"
      ],
      "properties": {
        "slot": {
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/EntityUIDStrings"
        }
      },
      "additionalProperties": false
    },
    "Links": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Link"
      }
    },
    "NamespaceDefinitionForJsonSchema": {
      "type": "object",
      "required": [
        "actions",
        "commonTypes",
        "entity_types"
      ],
      "properties": {
        "actions": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ActionType"
          }
        },
        "commonTypes": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/SchemaType"
          }
        },
        "entity_types": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/EntityType"
          }
        }
      },
      "additionalProperties": false
    },
    "PolicySpecification": {
      "description": "Struct defining the two possible ways to pass a set of policies to `json_is_authorized` and `json_validate`",
      "anyOf": [
        {
          "description": "provides multiple policies as a concatenated string",
          "type": "string"
        },
        {
          "description": "provides multiple policies as a hashmap where the policyId is the key",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      ]
    },
    "RecvdSlice": {
      "description": "policies must either be a single policy per entry, or only one entry with more than one policy",
      "type": "object",
      "required": [
        "entities",
        "policies"
      ],
      "properties": {
        "entities": {
          "description": "JSON object containing the entities data, in \"natural JSON\" form -- same format as expected by EntityJsonParser"
        },
        "policies": {
          "$ref": "#/definitions/PolicySpecification"
        },
        "template_instantiations": {
          "description": "Optional template instantiations. List of instantiations, one per If present, instantiate policies",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/TemplateLink"
          }
        },
        "templates": {
          "description": "Optional template policies.",
          "default": null,
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "SchemaType": {
      "description": "A restricted version of the `Type` enum containing only the types which are exposed to users.",
      "anyOf": [
        {
          "$ref": "#/definitions/SchemaTypeVariant"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "SchemaTypeVariant": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "String"
              ]
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "Long"
              ]
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "Boolean"
              ]
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "element",
            "type"
          ],
          "properties": {
            "element": {
              "$ref": "#/definitions/SchemaType"
            },
            "type": {
              "type": "string",
              "enum": [
                "Set"
              ]
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "additionalAttributes",
            "attributes",
            "type"
          ],
          "properties": {
            "additionalAttributes": {
              "type": "boolean"
            },
            "attributes": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/TypeOfAttribute"
              }
            },
            "type": {
              "type": "string",
              "enum": [
                "Record"
              ]
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "name",
            "type"
          ],
          "properties": {
            "name": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": [
                "Entity"
              ]
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "name",
            "type"
          ],
          "properties": {
            "name": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": [
                "Extension"
              ]
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "TemplateLink": {
      "type": "object",
      "required": [
        "instantiations",
        "result_policy_id",
        "template_id"
      ],
      "properties": {
        "instantiations": {
          "description": "List of strings to fill in all slots in policy template \"template_id\". (slot, String)",
          "allOf": [
            {
              "$ref": "#/definitions/Links"
            }
          ]
        },
        "result_policy_id": {
          "description": "Policy id for resulting concrete policy instance",
          "type": "string"
        },
        "template_id": {
          "description": "Template ID to fill in",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "TypeAndId": {
      "description": "Structure expected by the `__entity` escape",
      "type": "object",
      "required": [
        "id",
        "type"
      ],
      "properties": {
        "id": {
          "description": "Entity id",
          "type": "string"
        },
        "type": {
          "description": "Entity typename",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "TypeOfAttribute": {
      "description": "Used to describe the type of a record or entity attribute. It contains a the type of the attribute and whether the attribute is required. The type is flattened for serialization, so, in JSON format, this appears as a regular type with one extra property `required`.\n\nNote that we can't add #[serde(deny_unknown_fields)] here because we are using #[serde(tag = \"type\")] in ty:SchemaType which is flattened here. The way serde(flatten) is implemented means it may be possible to access fields incorrectly if a struct contains two structs that are flattened (`<https://github.com/serde-rs/serde/issues/1547>`). This shouldn't apply to us as we're using flatten only once (`<https://github.com/serde-rs/serde/issues/1600>`). This should be ok because unknown fields for TypeOfAttribute should be passed to SchemaType where they will be denied (`<https://github.com/serde-rs/serde/issues/1600>`).",
      "type": "object",
      "anyOf": [
        {
          "$ref": "#/definitions/SchemaTypeVariant"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ],
      "properties": {
        "required": {
          "default": true,
          "type": "boolean"
        }
      },
      "additionalProperties": false
    }
  }
}